{"ast":null,"code":"var _jsxFileName = \"/home/meet-vaghasiya/reactPractice/khatabook/src/components/Form.jsx\",\n  _s = $RefreshSig$();\nimport \"../assets/styles/transaction.css\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { MonthArr, TransactionTypeArr, AccountArr } from \"../utils/constant\";\nimport { Dropdown } from \"./Dropdown\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TransactionForm = () => {\n  _s();\n  var _errors$transactionDa, _errors$monthYear, _errors$transactionTy, _errors$fromAccount, _errors$toAccount, _errors$transactionAm, _errors$receipt, _errors$notes;\n  const {\n    id\n  } = useParams();\n  const index = id - 1;\n  const updateData = JSON.parse(localStorage.getItem(\"transactionForm\"));\n  // const formDetails = {\n\n  //   monthYear: {\n  //     value: \"\",\n  //   },\n  //   transactionDate: {\n  //     value: \"\",\n  //   },\n  //   transactionType: {\n  //     value: \"\",\n  //   },\n  //   fromAccount: {\n  //     value: \"\",\n  //   },\n  //   toAccount: {\n  //     value: \"\",\n  //   },\n  //   transactionAmount: {\n  //     value: \"\",\n  //   },\n  //   receipt: {\n  //     value: \"\",\n  //   },\n  //   notes: {\n  //     value: \"\",\n  //   },\n  // };\n\n  const [data, setData] = useState({});\n  // const [isDate, setDate] = useState(false);\n  // const [isMonth, setMonth] = useState(false);\n  // const [isAmount, setAmount] = useState(false);\n  // const [isFromAcc, setFromAcc] = useState(false);\n  // const [isToAcc, setToAcc] = useState(false);\n  // const [isNote, setNote] = useState(false);\n  // const [isReceipt, setReceipt] = useState(false);\n  // const [isType, setType] = useState(false);\n\n  const navigate = useNavigate();\n\n  // YUP VALIDATIONS...\n  const MAX_FILE_SIZE = 10240; //100KB\n\n  const validFileExtensions = {\n    image: [\"jpg\", \"gif\", \"png\", \"jpeg\", \"svg\", \"webp\"]\n  };\n  const type = [\"image/jpeg\", \"image/png\", \"image/jpg\", \"image/svg\"];\n\n  // function isValidFileType(fileName, fileType) {\n  //   return (\n  //     fileName &&\n  //     validFileExtensions[fileType].indexOf(fileName.split(\".\").pop()) > -1\n  //   );\n  // }\n  const formSchema = yup.object().shape({\n    transactionDate: yup.string().required(\"Transaction Date is required!!\"),\n    monthYear: yup.string().required(\"month year is required!!\"),\n    transactionType: yup.string().required(\"transaction type is required!!\"),\n    fromAccount: yup.string()\n    // .notOneOf([yup.ref(\"toAccount\"), null], \"To Account is  matched!!\")\n    .required(\"account is required!!\"),\n    toAccount: yup.string().notOneOf([yup.ref(\"fromAccount\"), null], \"From Account is  matched!!\").required(\"account is required!!\"),\n    transactionAmount: yup.number().integer().positive().min(1).required().typeError(\"amount is required!!\"),\n    notes: yup.string().min(3).max(250).required().typeError(\"notes is required!!\"),\n    receipt: yup.mixed().test({\n      name: \"is-sku\",\n      skipAbsent: true,\n      test(value, error) {\n        if (value === undefined || value === null || value.length === 0) {\n          return error.createError({\n            message: \"image is required!!!\"\n          });\n        } else {\n          if (value[0][\"size\"] > 10240) {\n            return error.createError({\n              message: \"image must less than 10kb\"\n            });\n          }\n          if (value[0][\"type\"] !== \"image/jpeg\" && value[0][\"type\"] !== \"image/png\" && value[0][\"type\"] !== \"image/jpg\" && value[0][\"type\"] !== \"image/svg\") {\n            return error.createError({\n              message: \"image type must be jpeg,png,jpg or svg..\"\n            });\n          }\n        }\n        return true;\n      }\n    })\n  });\n  const {\n    register,\n    handleSubmit,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(formSchema)\n  });\n\n  // ......\n\n  useEffect(() => {\n    for (const key in updateData) {\n      var _updateData$key;\n      if (key && parseInt((_updateData$key = updateData[key]) === null || _updateData$key === void 0 ? void 0 : _updateData$key.id) === parseInt(id)) {\n        setData(updateData[key]);\n        break;\n      }\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const removeImage = () => {\n    setData(prev => ({\n      ...prev,\n      receipt: {\n        ...prev.receipt,\n        value: \"\"\n      }\n    }));\n  };\n  const onSubmit = e => {\n    //  console.log(e)\n    let {\n      monthYear,\n      transactionDate,\n      transactionType,\n      fromAccount,\n      toAccount,\n      transactionAmount,\n      receipt,\n      notes\n    } = e;\n    console.log(monthYear, transactionDate, transactionType, fromAccount, toAccount, transactionAmount, receipt, notes);\n    let insertData = {\n      monthYear: {\n        value: monthYear\n      },\n      transactionDate: {\n        value: transactionDate\n      },\n      transactionType: {\n        value: transactionType\n      },\n      fromAccount: {\n        value: fromAccount\n      },\n      toAccount: {\n        value: toAccount\n      },\n      transactionAmount: {\n        value: transactionAmount\n      },\n      receipt: {\n        value: receipt\n      },\n      notes: {\n        value: notes\n      }\n    };\n    console.log(insertData);\n    setData(insertData);\n    console.log(data);\n    //  console.log(data);\n    if (localStorage.getItem(\"transactionForm\")) {\n      const retrivedata = JSON.parse(localStorage.getItem(\"transactionForm\"));\n      console.log(retrivedata);\n      if (id) {\n        for (const e in retrivedata) {\n          if (parseInt(retrivedata[e].id) === parseInt(id)) {\n            insertData[\"id\"] = id;\n            retrivedata[e] = insertData;\n          }\n        }\n      } else {\n        const prevDataIndex = Object.keys(retrivedata).length - 1;\n        const prevId = retrivedata[prevDataIndex][\"id\"];\n        insertData[\"id\"] = parseInt(prevId) + 1;\n        retrivedata.push(insertData);\n      }\n      localStorage.setItem(\"transactionForm\", JSON.stringify(retrivedata));\n    } else {\n      insertData[\"id\"] = 1;\n      localStorage.setItem(\"transactionForm\", JSON.stringify([insertData]));\n    }\n\n    // navigate(\"/transaction\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        method: \"POST\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Transaction Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"transactionDate\",\n            ...register(\"transactionDate\"),\n            // value={data.transactionDate.value}\n            // onChange={(e) => {\n            //   DateHandler(e.target.value);\n            // }}\n            onClick: () => {\n              const newdate = new Date();\n              var year = newdate.getFullYear();\n              var month = newdate.getMonth() + 1;\n              var day = newdate.getDate();\n              if (month < 10) {\n                month = \"0\" + month;\n              }\n              if (day < 10) {\n                day = \"0\" + day;\n              }\n              var limit = `${year}-${month}-${day}`;\n              document.getElementById(\"date\").setAttribute(\"max\", limit);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 244,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$transactionDa = errors.transactionDate) === null || _errors$transactionDa === void 0 ? void 0 : _errors$transactionDa.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 270,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Month Year:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"monthYear\",\n            ...register(\"monthYear\"),\n            // value={data.monthYear.value}\n            id: \"\"\n            // onChange={(e) => {\n            //   MonthHandler(e.target.value);\n            // }}\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 285,\n              columnNumber: 15\n            }, this), MonthArr.map(month => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: `${month} 2023`,\n                children: `${month} 2023`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 291,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$monthYear = errors.monthYear) === null || _errors$monthYear === void 0 ? void 0 : _errors$monthYear.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Transaction Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"transactionType\",\n            ...register(\"transactionType\"),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              for: TransactionTypeArr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 311,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$transactionTy = errors.transactionType) === null || _errors$transactionTy === void 0 ? void 0 : _errors$transactionTy.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"From Account:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"fromAccount\",\n            ...register(\"fromAccount\"),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 328,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              for: AccountArr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 331,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$fromAccount = errors.fromAccount) === null || _errors$fromAccount === void 0 ? void 0 : _errors$fromAccount.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 333,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"To Account: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"toAccount\",\n            ...register(\"toAccount\"),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              for: AccountArr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 350,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$toAccount = errors.toAccount) === null || _errors$toAccount === void 0 ? void 0 : _errors$toAccount.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"transactionAmount\",\n            ...register(\"transactionAmount\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 357,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$transactionAm = errors.transactionAmount) === null || _errors$transactionAm === void 0 ? void 0 : _errors$transactionAm.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Receipt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [\n          /*#__PURE__*/\n          // data.receipt.value ? (\n          //   <>\n          //     <img src={data.receipt.value} width={50} height={50} alt=\"\" />\n          //     <span onClick={removeImage} className=\"cross\">\n          //       X\n          //     </span>\n          //   </>\n          // ) :\n          _jsxDEV(_Fragment, {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              name: \"receipt\",\n              alt: \"Receipt is not found\",\n              ...register(\"receipt\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 17\n            }, this)\n          }, void 0, false), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$receipt = errors.receipt) === null || _errors$receipt === void 0 ? void 0 : _errors$receipt.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Notes:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            cols: \"30\",\n            rows: \"6\",\n            name: \"notes\",\n            ...register(\"notes\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$notes = errors.notes) === null || _errors$notes === void 0 ? void 0 : _errors$notes.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 410,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submitBtn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 413,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/transaction`,\n          className: \"showTrn\",\n          children: \"Show Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 417,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(TransactionForm, \"EMl/kc4nGmfUkonQGaouZqs15Zc=\", false, function () {\n  return [useParams, useNavigate, useForm];\n});\n_c = TransactionForm;\nexport default TransactionForm;\nvar _c;\n$RefreshReg$(_c, \"TransactionForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","Link","MonthArr","TransactionTypeArr","AccountArr","Dropdown","yup","yupResolver","useForm","jsxDEV","_jsxDEV","Fragment","_Fragment","TransactionForm","_s","_errors$transactionDa","_errors$monthYear","_errors$transactionTy","_errors$fromAccount","_errors$toAccount","_errors$transactionAm","_errors$receipt","_errors$notes","id","index","updateData","JSON","parse","localStorage","getItem","data","setData","navigate","MAX_FILE_SIZE","validFileExtensions","image","type","formSchema","object","shape","transactionDate","string","required","monthYear","transactionType","fromAccount","toAccount","notOneOf","ref","transactionAmount","number","integer","positive","min","typeError","notes","max","receipt","mixed","test","name","skipAbsent","value","error","undefined","length","createError","message","register","handleSubmit","formState","errors","resolver","key","_updateData$key","parseInt","removeImage","prev","onSubmit","e","console","log","insertData","retrivedata","prevDataIndex","Object","keys","prevId","push","setItem","stringify","children","className","method","fileName","_jsxFileName","lineNumber","columnNumber","onClick","newdate","Date","year","getFullYear","month","getMonth","day","getDate","limit","document","getElementById","setAttribute","selected","map","for","alt","cols","rows","to","_c","$RefreshReg$"],"sources":["/home/meet-vaghasiya/reactPractice/khatabook/src/components/Form.jsx"],"sourcesContent":["import \"../assets/styles/transaction.css\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { MonthArr, TransactionTypeArr, AccountArr } from \"../utils/constant\";\nimport { Dropdown } from \"./Dropdown\";\n\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\n\nconst TransactionForm = () => {\n  const { id } = useParams();\n  const index = id - 1;\n  const updateData = JSON.parse(localStorage.getItem(\"transactionForm\"));\n  // const formDetails = {\n\n  //   monthYear: {\n  //     value: \"\",\n  //   },\n  //   transactionDate: {\n  //     value: \"\",\n  //   },\n  //   transactionType: {\n  //     value: \"\",\n  //   },\n  //   fromAccount: {\n  //     value: \"\",\n  //   },\n  //   toAccount: {\n  //     value: \"\",\n  //   },\n  //   transactionAmount: {\n  //     value: \"\",\n  //   },\n  //   receipt: {\n  //     value: \"\",\n  //   },\n  //   notes: {\n  //     value: \"\",\n  //   },\n  // };\n\n  const [data, setData] = useState({});\n  // const [isDate, setDate] = useState(false);\n  // const [isMonth, setMonth] = useState(false);\n  // const [isAmount, setAmount] = useState(false);\n  // const [isFromAcc, setFromAcc] = useState(false);\n  // const [isToAcc, setToAcc] = useState(false);\n  // const [isNote, setNote] = useState(false);\n  // const [isReceipt, setReceipt] = useState(false);\n  // const [isType, setType] = useState(false);\n\n  const navigate = useNavigate();\n\n  // YUP VALIDATIONS...\n  const MAX_FILE_SIZE = 10240; //100KB\n\n  const validFileExtensions = {\n    image: [\"jpg\", \"gif\", \"png\", \"jpeg\", \"svg\", \"webp\"],\n  };\n\n  const type = [\"image/jpeg\", \"image/png\", \"image/jpg\", \"image/svg\"];\n\n  // function isValidFileType(fileName, fileType) {\n  //   return (\n  //     fileName &&\n  //     validFileExtensions[fileType].indexOf(fileName.split(\".\").pop()) > -1\n  //   );\n  // }\n  const formSchema = yup.object().shape({\n    transactionDate: yup.string().required(\"Transaction Date is required!!\"),\n    monthYear: yup.string().required(\"month year is required!!\"),\n    transactionType: yup.string().required(\"transaction type is required!!\"),\n    fromAccount: yup\n      .string()\n      // .notOneOf([yup.ref(\"toAccount\"), null], \"To Account is  matched!!\")\n      .required(\"account is required!!\"),\n    toAccount: yup\n      .string()\n      .notOneOf([yup.ref(\"fromAccount\"), null], \"From Account is  matched!!\")\n      .required(\"account is required!!\"),\n    transactionAmount: yup\n      .number()\n      .integer()\n      .positive()\n      .min(1)\n      .required()\n      .typeError(\"amount is required!!\"),\n    notes: yup\n      .string()\n      .min(3)\n      .max(250)\n      .required()\n      .typeError(\"notes is required!!\"),\n    receipt: yup.mixed().test({\n      name: \"is-sku\",\n      skipAbsent: true,\n      test(value, error) {\n        if (value === undefined || value === null || value.length === 0) {\n          return error.createError({ message: \"image is required!!!\" });\n        } else {\n          if (value[0][\"size\"] > 10240) {\n            return error.createError({ message: \"image must less than 10kb\" });\n          }\n         \n          if (\n            value[0][\"type\"] !== \"image/jpeg\" &&\n            value[0][\"type\"] !== \"image/png\" &&\n            value[0][\"type\"] !== \"image/jpg\" &&\n            value[0][\"type\"] !== \"image/svg\"\n          ) {\n            return error.createError({\n              message: \"image type must be jpeg,png,jpg or svg..\",\n            });\n          }\n        }\n\n        return true;\n      },\n    }),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(formSchema),\n  });\n\n  // ......\n\n  useEffect(() => {\n    for (const key in updateData) {\n      if (key && parseInt(updateData[key]?.id) === parseInt(id)) {\n        setData(updateData[key]);\n        break;\n      }\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const removeImage = () => {\n    setData((prev) => ({\n      ...prev,\n      receipt: {\n        ...prev.receipt,\n        value: \"\",\n      },\n    }));\n  };\n\n  const onSubmit = (e) => {\n    //  console.log(e)\n    let {\n      monthYear,\n      transactionDate,\n      transactionType,\n      fromAccount,\n      toAccount,\n      transactionAmount,\n      receipt,\n      notes,\n    } = e;\n    console.log(\n      monthYear,\n      transactionDate,\n      transactionType,\n      fromAccount,\n      toAccount,\n      transactionAmount,\n      receipt,\n      notes\n    );\n\n    let insertData = {\n      monthYear: {\n        value: monthYear,\n      },\n      transactionDate: {\n        value: transactionDate,\n      },\n      transactionType: {\n        value: transactionType,\n      },\n      fromAccount: {\n        value: fromAccount,\n      },\n      toAccount: {\n        value: toAccount,\n      },\n      transactionAmount: {\n        value: transactionAmount,\n      },\n      receipt: {\n        value: receipt,\n      },\n      notes: {\n        value: notes,\n      },\n    };\n\n    console.log(insertData);\n    setData(insertData);\n    console.log(data);\n    //  console.log(data);\n    if (localStorage.getItem(\"transactionForm\")) {\n      const retrivedata = JSON.parse(localStorage.getItem(\"transactionForm\"));\n      console.log(retrivedata);\n\n      if (id) {\n        for (const e in retrivedata) {\n          if (parseInt(retrivedata[e].id) === parseInt(id)) {\n            insertData[\"id\"] = id;\n            retrivedata[e] = insertData;\n          }\n        }\n      } else {\n        const prevDataIndex = Object.keys(retrivedata).length - 1;\n        const prevId = retrivedata[prevDataIndex][\"id\"];\n        insertData[\"id\"] = parseInt(prevId) + 1;\n\n        retrivedata.push(insertData);\n      }\n\n      localStorage.setItem(\"transactionForm\", JSON.stringify(retrivedata));\n    } else {\n      insertData[\"id\"] = 1;\n\n      localStorage.setItem(\"transactionForm\", JSON.stringify([insertData]));\n    }\n\n    // navigate(\"/transaction\");\n  };\n\n  return (\n    <>\n      <div className=\"form\">\n        <form onSubmit={handleSubmit(onSubmit)} method=\"POST\">\n          <label className=\"label\">Transaction Date:</label>\n          <div className=\"input\">\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"transactionDate\"\n              {...register(\"transactionDate\")}\n              // value={data.transactionDate.value}\n              // onChange={(e) => {\n              //   DateHandler(e.target.value);\n              // }}\n              onClick={() => {\n                const newdate = new Date();\n                var year = newdate.getFullYear();\n                var month = newdate.getMonth() + 1;\n                var day = newdate.getDate();\n                if (month < 10) {\n                  month = \"0\" + month;\n                }\n                if (day < 10) {\n                  day = \"0\" + day;\n                }\n\n                var limit = `${year}-${month}-${day}`;\n\n                document.getElementById(\"date\").setAttribute(\"max\", limit);\n              }}\n            ></input>\n            <span>{errors.transactionDate?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Month Year:</label>\n\n          <div className=\"input\">\n            <select\n              name=\"monthYear\"\n              {...register(\"monthYear\")}\n              // value={data.monthYear.value}\n              id=\"\"\n              // onChange={(e) => {\n              //   MonthHandler(e.target.value);\n              // }}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n\n              {MonthArr.map((month) => {\n                return (\n                  <option value={`${month} 2023`}>{`${month} 2023`}</option>\n                );\n              })}\n            </select>\n            <span>{errors.monthYear?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Transaction Type:</label>\n          <div className=\"input\">\n            <select\n              name=\"transactionType\"\n              {...register(\"transactionType\")}\n              // value={data.transactionType.value}\n              // onChange={(e) => {\n              //   TypeHandler(e.target.value);\n              // }}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={TransactionTypeArr} />\n            </select>\n            <span>{errors.transactionType?.message}</span>\n          </div>\n          <br></br>\n\n          <label className=\"label\">From Account:</label>\n          <div className=\"input\">\n            <select\n              name=\"fromAccount\"\n              {...register(\"fromAccount\")}\n\n              // value={data.fromAccount.value}\n              // onChange={(e) => {\n              //   FromActHandler(e.target.value);\n              // }}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={AccountArr} />\n            </select>\n            <span>{errors.fromAccount?.message}</span>\n          </div>\n          <br></br>\n\n          <label className=\"label\">To Account: </label>\n          <div className=\"input\">\n            <select\n              name=\"toAccount\"\n              {...register(\"toAccount\")}\n              // value={data.toAccount.value}\n              // onChange={(e) => {\n              //   toActHandler(e.target.value);\n              // }}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={AccountArr} />\n            </select>\n            <span>{errors.toAccount?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Amount:</label>\n          <div className=\"input\">\n            <input\n              type=\"text\"\n              name=\"transactionAmount\"\n              {...register(\"transactionAmount\")}\n              // value={data.transactionAmount.value}\n              // onChange={(e) => {\n              //   AmountHandler(e.target.value);\n              // }}\n            ></input>\n            <span>{errors.transactionAmount?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Receipt:</label>\n          <div className=\"input\">\n            {\n              // data.receipt.value ? (\n              //   <>\n              //     <img src={data.receipt.value} width={50} height={50} alt=\"\" />\n              //     <span onClick={removeImage} className=\"cross\">\n              //       X\n              //     </span>\n              //   </>\n              // ) :\n              <>\n                <input\n                  type=\"file\"\n                  name=\"receipt\"\n                  alt=\"Receipt is not found\"\n                  {...register(\"receipt\")}\n                  // value={data.receipt.value}\n                  // onChange={(e) => {\n                  //   ReceiptHandler(e);\n                  // }}\n                ></input>\n              </>\n            }\n\n            <span>{errors.receipt?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Notes:</label>\n          <div className=\"input\">\n            <textarea\n              cols=\"30\"\n              rows=\"6\"\n              name=\"notes\"\n              {...register(\"notes\")}\n\n              // value={data.notes.value}\n              // onChange={(e) => {\n              //   NotesHandler(e.target.value);\n              // }}\n            ></textarea>\n            <span>{errors.notes?.message}</span>\n          </div>\n\n          <button type=\"submit\" className=\"submitBtn\">\n            Submit\n          </button>\n\n          <Link to={`/transaction`} className=\"showTrn\">\n            Show Transaction\n          </Link>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default TransactionForm;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}