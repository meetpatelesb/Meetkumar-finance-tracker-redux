{"ast":null,"code":"var _jsxFileName = \"/home/meet-vaghasiya/reactPractice/khatabook/src/components/Form.jsx\",\n  _s = $RefreshSig$();\nimport \"../assets/styles/transaction.css\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { MonthArr, TransactionTypeArr, AccountArr } from \"../utils/constant\";\nimport { Dropdown } from \"./Dropdown\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TransactionForm = () => {\n  _s();\n  var _errors$transactionDa, _errors$monthYear, _errors$transactionTy, _errors$fromAccount, _errors$toAccount, _errors$transactionAm, _errors$receipt, _errors$notes;\n  const {\n    id\n  } = useParams();\n  const index = id - 1;\n  const updateData = JSON.parse(localStorage.getItem(\"transactionForm\"));\n  // const formDetails = {\n\n  //   monthYear: {\n  //     value: \"\",\n  //   },\n  //   transactionDate: {\n  //     value: \"\",\n  //   },\n  //   transactionType: {\n  //     value: \"\",\n  //   },\n  //   fromAccount: {\n  //     value: \"\",\n  //   },\n  //   toAccount: {\n  //     value: \"\",\n  //   },\n  //   transactionAmount: {\n  //     value: \"\",\n  //   },\n  //   receipt: {\n  //     value: \"\",\n  //   },\n  //   notes: {\n  //     value: \"\",\n  //   },\n  // };\n\n  const [data, setData] = useState({});\n  // const [isDate, setDate] = useState(false);\n  // const [isMonth, setMonth] = useState(false);\n  // const [isAmount, setAmount] = useState(false);\n  // const [isFromAcc, setFromAcc] = useState(false);\n  // const [isToAcc, setToAcc] = useState(false);\n  // const [isNote, setNote] = useState(false);\n  // const [isReceipt, setReceipt] = useState(false);\n  // const [isType, setType] = useState(false);\n\n  const navigate = useNavigate();\n\n  // YUP VALIDATIONS...\n  const MAX_FILE_SIZE = 10240; //100KB\n\n  const validFileExtensions = {\n    image: [\"jpg\", \"gif\", \"png\", \"jpeg\", \"svg\", \"webp\"]\n  };\n  function isValidFileType(fileName, fileType) {\n    return fileName && validFileExtensions[fileType].indexOf(fileName.split(\".\").pop()) > -1;\n  }\n  const formSchema = yup.object().shape({\n    transactionDate: yup.string().required(\"Transaction Date is required!!\"),\n    monthYear: yup.string().required(\"month year is required!!\"),\n    transactionType: yup.string().required(\"transaction type is required!!\"),\n    fromAccount: yup.string()\n    // .notOneOf([yup.ref(\"toAccount\"), null], \"To Account is  matched!!\")\n    .required(\"account is required!!\"),\n    toAccount: yup.string().notOneOf([yup.ref(\"fromAccount\"), null], \"From Account is  matched!!\").required(\"account is required!!\"),\n    transactionAmount: yup.number().integer().positive().min(1).required().typeError(\"amount is required!!\"),\n    notes: yup.string().min(3).max(250).required().typeError(\"notes is required!!\")\n    // receipt: yup\n    //   .mixed()\n    //   .required(\"Required\")\n    //   .test(\"is-valid-type\", \"Not a valid image type\", (value) =>\n    //     isValidFileType(value && value.name.toLowerCase(), \"image\")\n    //   )\n    //   .test(\n    //     \"is-valid-size\",\n    //     \"Max allowed size is 100KB\",\n    //     (value) => value && value.size <= MAX_FILE_SIZE\n    //   ),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: {\n      errors\n    }\n  } = useForm({\n    resolver: yupResolver(formSchema)\n  });\n\n  // ......\n\n  useEffect(() => {\n    for (const key in updateData) {\n      var _updateData$key;\n      if (key && parseInt((_updateData$key = updateData[key]) === null || _updateData$key === void 0 ? void 0 : _updateData$key.id) === parseInt(id)) {\n        setData(updateData[key]);\n        break;\n      }\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // onchange functions\n  // const DateHandler = (e) => {\n  //   const date = e;\n  //   if (date) {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       transactionDate: {\n  //         ...prev.transactionDate,\n  //         value: date,\n  //         error: \"\",\n  //       },\n  //     }));\n  //     setDate(true);\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       transactionDate: {\n  //         ...prev.transactionDate,\n  //         error: \"date is Requierd!!\",\n  //       },\n  //     }));\n  //     setDate(false);\n  //   }\n  // };\n\n  // const MonthHandler = (e) => {\n  //   const month = e;\n  //   if (month) {\n  //     if (month === \"Select\") {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         monthYear: {\n  //           ...prev.monthYear,\n  //           error: \"Month is Required!!\",\n  //         },\n  //       }));\n  //       setMonth(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         monthYear: {\n  //           ...prev.monthYear,\n  //           value: month,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setMonth(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       monthYear: {\n  //         ...prev.monthYear,\n  //         error: \"Month is Required!!\",\n  //       },\n  //     }));\n  //     setMonth(false);\n  //   }\n  // };\n\n  // const TypeHandler = (e) => {\n  //   const type = e;\n  //   if (type) {\n  //     if (type === \"Select\") {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         transactionType: {\n  //           ...prev.transactionType,\n  //           error: \"type is Required!!\",\n  //         },\n  //       }));\n  //     } else {\n  //       setType(false);\n  //       setData((prev) => ({\n  //         ...prev,\n  //         transactionType: {\n  //           ...prev.transactionType,\n  //           value: type,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setType(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       transactionType: {\n  //         ...prev.transactionType,\n  //         error: \"type is Required!!\",\n  //       },\n  //     }));\n  //     setType(false);\n  //   }\n  // };\n\n  // const FromActHandler = (e) => {\n  //   const FromAcc = e;\n  //   if (FromAcc) {\n  //     if (FromAcc === \"Select\") {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         fromAccount: {\n  //           ...prev.fromAccount,\n  //           error: \"Account is Required!!\",\n  //         },\n  //       }));\n  //       setFromAcc(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         fromAccount: {\n  //           ...prev.fromAccount,\n  //           value: FromAcc,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setFromAcc(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       fromAccount: {\n  //         ...prev.fromAccount,\n  //         error: \"Account is Required\",\n  //       },\n  //     }));\n  //     setFromAcc(false);\n  //   }\n  // };\n\n  // const toActHandler = (e) => {\n  //   const ToAcc = e;\n  //   if (ToAcc) {\n  //     if (ToAcc === \"Select\") {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         toAccount: {\n  //           ...prev.toAccount,\n  //           error: \"Account is Required!!\",\n  //         },\n  //       }));\n  //       setToAcc(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         toAccount: {\n  //           ...prev.toAccount,\n  //           value: ToAcc,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setToAcc(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       toAccount: {\n  //         ...prev.toAccount,\n  //         error: \"Account is Required!!\",\n  //       },\n  //     }));\n  //     setToAcc(false);\n  //   }\n  // };\n\n  // const AmountHandler = (e) => {\n  //   const value = e;\n  //   setData((prev) => ({\n  //     ...prev,\n  //     transactionAmount: {\n  //       ...prev.transactionAmount,\n  //       value: value,\n  //     },\n  //   }));\n\n  //   if (value) {\n  //     if (value.length < 2) {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         transactionAmount: {\n  //           ...prev.transactionAmount,\n  //           error: \"Amount is too short!!\",\n  //         },\n  //       }));\n  //       setAmount(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         transactionAmount: {\n  //           ...prev.transactionAmount,\n  //           value: value,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setAmount(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       transactionAmount: {\n  //         ...prev.transactionAmount,\n  //         error: \"amount is Required!!\",\n  //       },\n  //     }));\n  //     setAmount(false);\n  //   }\n  // };\n\n  // const ReceiptHandler = (e) => {\n  //   if (e) {\n  //     if (e?.target?.type === \"file\") {\n  //       if (e?.target?.files[0]?.size > 10000) {\n  //         setData((prev) => ({\n  //           ...prev,\n  //           receipt: {\n  //             ...prev.receipt,\n  //             error: \"Image is too large\",\n  //           },\n  //         }));\n  //         setReceipt(false);\n  //       } else {\n  //         let freader = new FileReader();\n\n  //         freader.readAsDataURL(e?.target?.files[0]);\n\n  //         freader.addEventListener(\"load\", () => {\n  //           const receiptPhoto = freader.result;\n  //           setData((prev) => ({\n  //             ...prev,\n  //             receipt: {\n  //               ...prev.receipt,\n  //               value: receiptPhoto,\n  //               error: \"\",\n  //             },\n  //           }));\n  //           setReceipt(true);\n  //         });\n  //       }\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       receipt: {\n  //         ...prev.receipt,\n  //         error: \"Receipt is Required!!\",\n  //       },\n  //     }));\n  //     setReceipt(false);\n  //   }\n  // };\n\n  // const NotesHandler = (e) => {\n  //   const notes = e;\n\n  //   setData((prev) => ({\n  //     ...prev,\n  //     notes: {\n  //       ...prev.notes,\n  //       value: notes,\n  //     },\n  //   }));\n\n  //   if (notes.trim()) {\n  //     if (notes.trim().length > 250 || notes.trim().length < 3) {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         notes: {\n  //           ...prev.notes,\n  //           error: \"Notes is Required!!\",\n  //         },\n  //       }));\n  //       setNote(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         notes: {\n  //           ...prev.notes,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setNote(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       notes: {\n  //         ...prev.notes,\n  //         error: \"Notes is Required!!\",\n  //       },\n  //     }));\n  //     setNote(false);\n  //   }\n  // };\n\n  const removeImage = () => {\n    setData(prev => ({\n      ...prev,\n      receipt: {\n        ...prev.receipt,\n        value: \"\"\n      }\n    }));\n  };\n  const onSubmit = e => {\n    //  console.log(e)\n    let {\n      monthYear,\n      transactionDate,\n      transactionType,\n      fromAccount,\n      toAccount,\n      transactionAmount,\n      receipt,\n      notes\n    } = e;\n    console.log(monthYear, transactionDate, transactionType, fromAccount, toAccount, transactionAmount, receipt, notes);\n\n    //  setData((prev) => ({\n    //    ...prev,\n    let insertData = {\n      monthYear: {\n        //  ...prev.monthYear,\n        value: monthYear\n      },\n      transactionDate: {\n        //  ...prev.transactionDate,\n        value: transactionDate\n      },\n      transactionType: {\n        //  ...prev.transactionType,\n        value: transactionType\n      },\n      fromAccount: {\n        //  ...prev.fromAccount,\n        value: fromAccount\n      },\n      toAccount: {\n        //  ...prev.toAccount,\n        value: toAccount\n      },\n      transactionAmount: {\n        //  ...prev.transactionAmount,\n        value: transactionAmount\n      },\n      receipt: {\n        //  ...prev.receipt,\n        value: receipt\n      },\n      notes: {\n        //  ...prev.notes,\n        value: notes\n      }\n    };\n    //  ));\n    console.log(insertData);\n    setData(insertData);\n    console.log(data);\n    //  console.log(data);\n    if (localStorage.getItem(\"transactionForm\")) {\n      const retrivedata = JSON.parse(localStorage.getItem(\"transactionForm\"));\n      console.log(retrivedata);\n      if (id) {\n        for (const e in retrivedata) {\n          if (parseInt(retrivedata[e].id) === parseInt(id)) {\n            insertData[\"id\"] = id;\n            retrivedata[e] = insertData;\n          }\n        }\n      } else {\n        const prevDataIndex = Object.keys(retrivedata).length - 1;\n        const prevId = retrivedata[prevDataIndex][\"id\"];\n        insertData[\"id\"] = parseInt(prevId) + 1;\n        retrivedata.push(insertData);\n      }\n      localStorage.setItem(\"transactionForm\", JSON.stringify(retrivedata));\n    } else {\n      insertData[\"id\"] = 1;\n      localStorage.setItem(\"transactionForm\", JSON.stringify([insertData]));\n    }\n\n    // navigate(\"/transaction\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit(onSubmit),\n        method: \"POST\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Transaction Date:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"date\",\n            id: \"date\",\n            name: \"transactionDate\",\n            ...register(\"transactionDate\"),\n            // value={data.transactionDate.value}\n            // onChange={(e) => {\n            //   DateHandler(e.target.value);\n            // }}\n            onClick: () => {\n              const newdate = new Date();\n              var year = newdate.getFullYear();\n              var month = newdate.getMonth() + 1;\n              var day = newdate.getDate();\n              if (month < 10) {\n                month = \"0\" + month;\n              }\n              if (day < 10) {\n                day = \"0\" + day;\n              }\n              var limit = `${year}-${month}-${day}`;\n              document.getElementById(\"date\").setAttribute(\"max\", limit);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 533,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$transactionDa = errors.transactionDate) === null || _errors$transactionDa === void 0 ? void 0 : _errors$transactionDa.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Month Year:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"monthYear\",\n            ...register(\"monthYear\"),\n            // value={data.monthYear.value}\n            id: \"\"\n            // onChange={(e) => {\n            //   MonthHandler(e.target.value);\n            // }}\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 574,\n              columnNumber: 15\n            }, this), MonthArr.map(month => {\n              return /*#__PURE__*/_jsxDEV(\"option\", {\n                value: `${month} 2023`,\n                children: `${month} 2023`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 580,\n                columnNumber: 19\n              }, this);\n            })]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 565,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$monthYear = errors.monthYear) === null || _errors$monthYear === void 0 ? void 0 : _errors$monthYear.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 584,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Transaction Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"transactionType\",\n            ...register(\"transactionType\"),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 597,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              for: TransactionTypeArr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 600,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 589,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$transactionTy = errors.transactionType) === null || _errors$transactionTy === void 0 ? void 0 : _errors$transactionTy.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 602,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 588,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 604,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"From Account:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"fromAccount\",\n            ...register(\"fromAccount\"),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 617,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              for: AccountArr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 620,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$fromAccount = errors.fromAccount) === null || _errors$fromAccount === void 0 ? void 0 : _errors$fromAccount.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"To Account: \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"toAccount\",\n            ...register(\"toAccount\"),\n            children: [/*#__PURE__*/_jsxDEV(\"option\", {\n              value: \"\",\n              selected: true,\n              children: \"Select\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Dropdown, {\n              for: AccountArr\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 639,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$toAccount = errors.toAccount) === null || _errors$toAccount === void 0 ? void 0 : _errors$toAccount.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 627,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Amount:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 644,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"transactionAmount\",\n            ...register(\"transactionAmount\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$transactionAm = errors.transactionAmount) === null || _errors$transactionAm === void 0 ? void 0 : _errors$transactionAm.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Receipt:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [\n          /*#__PURE__*/\n          // data.receipt.value ? (\n          //   <>\n          //     <img src={data.receipt.value} width={50} height={50} alt=\"\" />\n          //     <span onClick={removeImage} className=\"cross\">\n          //       X\n          //     </span>\n          //   </>\n          // ) :\n          _jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              name: \"receipt\",\n              alt: \"Receipt is not found\",\n              ...register(\"receipt\")\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 670,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              onClick: removeImage,\n              className: \"cross\",\n              children: \"X\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 680,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$receipt = errors.receipt) === null || _errors$receipt === void 0 ? void 0 : _errors$receipt.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 659,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 688,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"label\",\n          children: \"Notes:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"input\",\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            cols: \"30\",\n            rows: \"6\",\n            name: \"notes\",\n            ...register(\"notes\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 691,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: (_errors$notes = errors.notes) === null || _errors$notes === void 0 ? void 0 : _errors$notes.message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 702,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"submitBtn\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Link, {\n          to: `/transaction`,\n          className: \"showTrn\",\n          children: \"Show Transaction\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(TransactionForm, \"BjWcphlkGo/p2BPTWjqJ54D/9AE=\", false, function () {\n  return [useParams, useNavigate, useForm];\n});\n_c = TransactionForm;\nexport default TransactionForm;\nvar _c;\n$RefreshReg$(_c, \"TransactionForm\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","useParams","Link","MonthArr","TransactionTypeArr","AccountArr","Dropdown","yup","yupResolver","useForm","jsxDEV","_jsxDEV","Fragment","_Fragment","TransactionForm","_s","_errors$transactionDa","_errors$monthYear","_errors$transactionTy","_errors$fromAccount","_errors$toAccount","_errors$transactionAm","_errors$receipt","_errors$notes","id","index","updateData","JSON","parse","localStorage","getItem","data","setData","navigate","MAX_FILE_SIZE","validFileExtensions","image","isValidFileType","fileName","fileType","indexOf","split","pop","formSchema","object","shape","transactionDate","string","required","monthYear","transactionType","fromAccount","toAccount","notOneOf","ref","transactionAmount","number","integer","positive","min","typeError","notes","max","register","handleSubmit","setValue","formState","errors","resolver","key","_updateData$key","parseInt","removeImage","prev","receipt","value","onSubmit","e","console","log","insertData","retrivedata","prevDataIndex","Object","keys","length","prevId","push","setItem","stringify","children","className","method","_jsxFileName","lineNumber","columnNumber","type","name","onClick","newdate","Date","year","getFullYear","month","getMonth","day","getDate","limit","document","getElementById","setAttribute","message","selected","map","for","alt","cols","rows","to","_c","$RefreshReg$"],"sources":["/home/meet-vaghasiya/reactPractice/khatabook/src/components/Form.jsx"],"sourcesContent":["import \"../assets/styles/transaction.css\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { MonthArr, TransactionTypeArr, AccountArr } from \"../utils/constant\";\nimport { Dropdown } from \"./Dropdown\";\n\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\n\nconst TransactionForm = () => {\n  const { id } = useParams();\n  const index = id - 1;\n  const updateData = JSON.parse(localStorage.getItem(\"transactionForm\"));\n  // const formDetails = {\n\n  //   monthYear: {\n  //     value: \"\",\n  //   },\n  //   transactionDate: {\n  //     value: \"\",\n  //   },\n  //   transactionType: {\n  //     value: \"\",\n  //   },\n  //   fromAccount: {\n  //     value: \"\",\n  //   },\n  //   toAccount: {\n  //     value: \"\",\n  //   },\n  //   transactionAmount: {\n  //     value: \"\",\n  //   },\n  //   receipt: {\n  //     value: \"\",\n  //   },\n  //   notes: {\n  //     value: \"\",\n  //   },\n  // };\n\n  const [data, setData] = useState({});\n  // const [isDate, setDate] = useState(false);\n  // const [isMonth, setMonth] = useState(false);\n  // const [isAmount, setAmount] = useState(false);\n  // const [isFromAcc, setFromAcc] = useState(false);\n  // const [isToAcc, setToAcc] = useState(false);\n  // const [isNote, setNote] = useState(false);\n  // const [isReceipt, setReceipt] = useState(false);\n  // const [isType, setType] = useState(false);\n\n  const navigate = useNavigate();\n\n  // YUP VALIDATIONS...\n  const MAX_FILE_SIZE = 10240; //100KB\n\n  const validFileExtensions = {\n    image: [\"jpg\", \"gif\", \"png\", \"jpeg\", \"svg\", \"webp\"],\n  };\n\n  function isValidFileType(fileName, fileType) {\n    return (\n      fileName &&\n      validFileExtensions[fileType].indexOf(fileName.split(\".\").pop()) > -1\n    );\n  }\n  const formSchema = yup.object().shape({\n    transactionDate: yup.string().required(\"Transaction Date is required!!\"),\n    monthYear: yup.string().required(\"month year is required!!\"),\n    transactionType: yup.string().required(\"transaction type is required!!\"),\n    fromAccount: yup\n      .string()\n      // .notOneOf([yup.ref(\"toAccount\"), null], \"To Account is  matched!!\")\n      .required(\"account is required!!\"),\n    toAccount: yup\n      .string()\n      .notOneOf([yup.ref(\"fromAccount\"), null], \"From Account is  matched!!\")\n      .required(\"account is required!!\"),\n    transactionAmount: yup\n      .number()\n      .integer()\n      .positive()\n      .min(1)\n      .required()\n      .typeError(\"amount is required!!\"),\n    notes: yup\n      .string()\n      .min(3)\n      .max(250)\n      .required()\n      .typeError(\"notes is required!!\"),\n    // receipt: yup\n    //   .mixed()\n    //   .required(\"Required\")\n    //   .test(\"is-valid-type\", \"Not a valid image type\", (value) =>\n    //     isValidFileType(value && value.name.toLowerCase(), \"image\")\n    //   )\n    //   .test(\n    //     \"is-valid-size\",\n    //     \"Max allowed size is 100KB\",\n    //     (value) => value && value.size <= MAX_FILE_SIZE\n    //   ),\n  });\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(formSchema),\n  });\n\n  // ......\n\n  useEffect(() => {\n    for (const key in updateData) {\n      if (key && parseInt(updateData[key]?.id) === parseInt(id)) {\n        setData(updateData[key]);\n        break;\n      }\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // onchange functions\n  // const DateHandler = (e) => {\n  //   const date = e;\n  //   if (date) {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       transactionDate: {\n  //         ...prev.transactionDate,\n  //         value: date,\n  //         error: \"\",\n  //       },\n  //     }));\n  //     setDate(true);\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       transactionDate: {\n  //         ...prev.transactionDate,\n  //         error: \"date is Requierd!!\",\n  //       },\n  //     }));\n  //     setDate(false);\n  //   }\n  // };\n\n  // const MonthHandler = (e) => {\n  //   const month = e;\n  //   if (month) {\n  //     if (month === \"Select\") {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         monthYear: {\n  //           ...prev.monthYear,\n  //           error: \"Month is Required!!\",\n  //         },\n  //       }));\n  //       setMonth(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         monthYear: {\n  //           ...prev.monthYear,\n  //           value: month,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setMonth(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       monthYear: {\n  //         ...prev.monthYear,\n  //         error: \"Month is Required!!\",\n  //       },\n  //     }));\n  //     setMonth(false);\n  //   }\n  // };\n\n  // const TypeHandler = (e) => {\n  //   const type = e;\n  //   if (type) {\n  //     if (type === \"Select\") {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         transactionType: {\n  //           ...prev.transactionType,\n  //           error: \"type is Required!!\",\n  //         },\n  //       }));\n  //     } else {\n  //       setType(false);\n  //       setData((prev) => ({\n  //         ...prev,\n  //         transactionType: {\n  //           ...prev.transactionType,\n  //           value: type,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setType(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       transactionType: {\n  //         ...prev.transactionType,\n  //         error: \"type is Required!!\",\n  //       },\n  //     }));\n  //     setType(false);\n  //   }\n  // };\n\n  // const FromActHandler = (e) => {\n  //   const FromAcc = e;\n  //   if (FromAcc) {\n  //     if (FromAcc === \"Select\") {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         fromAccount: {\n  //           ...prev.fromAccount,\n  //           error: \"Account is Required!!\",\n  //         },\n  //       }));\n  //       setFromAcc(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         fromAccount: {\n  //           ...prev.fromAccount,\n  //           value: FromAcc,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setFromAcc(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       fromAccount: {\n  //         ...prev.fromAccount,\n  //         error: \"Account is Required\",\n  //       },\n  //     }));\n  //     setFromAcc(false);\n  //   }\n  // };\n\n  // const toActHandler = (e) => {\n  //   const ToAcc = e;\n  //   if (ToAcc) {\n  //     if (ToAcc === \"Select\") {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         toAccount: {\n  //           ...prev.toAccount,\n  //           error: \"Account is Required!!\",\n  //         },\n  //       }));\n  //       setToAcc(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         toAccount: {\n  //           ...prev.toAccount,\n  //           value: ToAcc,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setToAcc(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       toAccount: {\n  //         ...prev.toAccount,\n  //         error: \"Account is Required!!\",\n  //       },\n  //     }));\n  //     setToAcc(false);\n  //   }\n  // };\n\n  // const AmountHandler = (e) => {\n  //   const value = e;\n  //   setData((prev) => ({\n  //     ...prev,\n  //     transactionAmount: {\n  //       ...prev.transactionAmount,\n  //       value: value,\n  //     },\n  //   }));\n\n  //   if (value) {\n  //     if (value.length < 2) {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         transactionAmount: {\n  //           ...prev.transactionAmount,\n  //           error: \"Amount is too short!!\",\n  //         },\n  //       }));\n  //       setAmount(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         transactionAmount: {\n  //           ...prev.transactionAmount,\n  //           value: value,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setAmount(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       transactionAmount: {\n  //         ...prev.transactionAmount,\n  //         error: \"amount is Required!!\",\n  //       },\n  //     }));\n  //     setAmount(false);\n  //   }\n  // };\n\n  // const ReceiptHandler = (e) => {\n  //   if (e) {\n  //     if (e?.target?.type === \"file\") {\n  //       if (e?.target?.files[0]?.size > 10000) {\n  //         setData((prev) => ({\n  //           ...prev,\n  //           receipt: {\n  //             ...prev.receipt,\n  //             error: \"Image is too large\",\n  //           },\n  //         }));\n  //         setReceipt(false);\n  //       } else {\n  //         let freader = new FileReader();\n\n  //         freader.readAsDataURL(e?.target?.files[0]);\n\n  //         freader.addEventListener(\"load\", () => {\n  //           const receiptPhoto = freader.result;\n  //           setData((prev) => ({\n  //             ...prev,\n  //             receipt: {\n  //               ...prev.receipt,\n  //               value: receiptPhoto,\n  //               error: \"\",\n  //             },\n  //           }));\n  //           setReceipt(true);\n  //         });\n  //       }\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       receipt: {\n  //         ...prev.receipt,\n  //         error: \"Receipt is Required!!\",\n  //       },\n  //     }));\n  //     setReceipt(false);\n  //   }\n  // };\n\n  // const NotesHandler = (e) => {\n  //   const notes = e;\n\n  //   setData((prev) => ({\n  //     ...prev,\n  //     notes: {\n  //       ...prev.notes,\n  //       value: notes,\n  //     },\n  //   }));\n\n  //   if (notes.trim()) {\n  //     if (notes.trim().length > 250 || notes.trim().length < 3) {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         notes: {\n  //           ...prev.notes,\n  //           error: \"Notes is Required!!\",\n  //         },\n  //       }));\n  //       setNote(false);\n  //     } else {\n  //       setData((prev) => ({\n  //         ...prev,\n  //         notes: {\n  //           ...prev.notes,\n  //           error: \"\",\n  //         },\n  //       }));\n  //       setNote(true);\n  //     }\n  //   } else {\n  //     setData((prev) => ({\n  //       ...prev,\n  //       notes: {\n  //         ...prev.notes,\n  //         error: \"Notes is Required!!\",\n  //       },\n  //     }));\n  //     setNote(false);\n  //   }\n  // };\n\n  const removeImage = () => {\n    setData((prev) => ({\n      ...prev,\n      receipt: {\n        ...prev.receipt,\n        value: \"\",\n      },\n    }));\n  };\n\n  const onSubmit = (e) => {\n    //  console.log(e)\n    let {\n      monthYear,\n      transactionDate,\n      transactionType,\n      fromAccount,\n      toAccount,\n      transactionAmount,\n      receipt,\n      notes,\n    } = e;\n    console.log(\n      monthYear,\n      transactionDate,\n      transactionType,\n      fromAccount,\n      toAccount,\n      transactionAmount,\n      receipt,\n      notes\n    );\n\n    //  setData((prev) => ({\n    //    ...prev,\n    let insertData = {\n      monthYear: {\n        //  ...prev.monthYear,\n        value: monthYear,\n      },\n      transactionDate: {\n        //  ...prev.transactionDate,\n        value: transactionDate,\n      },\n      transactionType: {\n        //  ...prev.transactionType,\n        value: transactionType,\n      },\n      fromAccount: {\n        //  ...prev.fromAccount,\n        value: fromAccount,\n      },\n      toAccount: {\n        //  ...prev.toAccount,\n        value: toAccount,\n      },\n      transactionAmount: {\n        //  ...prev.transactionAmount,\n        value: transactionAmount,\n      },\n      receipt: {\n        //  ...prev.receipt,\n        value: receipt,\n      },\n      notes: {\n        //  ...prev.notes,\n        value: notes,\n      },\n    };\n    //  ));\n    console.log(insertData);\n    setData(insertData);\n    console.log(data);\n    //  console.log(data);\n    if (localStorage.getItem(\"transactionForm\")) {\n      const retrivedata = JSON.parse(localStorage.getItem(\"transactionForm\"));\n      console.log(retrivedata);\n\n      if (id) {\n        for (const e in retrivedata) {\n          if (parseInt(retrivedata[e].id) === parseInt(id)) {\n            insertData[\"id\"] = id;\n            retrivedata[e] = insertData;\n          }\n        }\n      } else {\n        const prevDataIndex = Object.keys(retrivedata).length - 1;\n\n        const prevId = retrivedata[prevDataIndex][\"id\"];\n        insertData[\"id\"] = parseInt(prevId) + 1;\n\n        retrivedata.push(insertData);\n      }\n\n      localStorage.setItem(\"transactionForm\", JSON.stringify(retrivedata));\n    } else {\n      insertData[\"id\"] = 1;\n\n      localStorage.setItem(\"transactionForm\", JSON.stringify([insertData]));\n    }\n\n    // navigate(\"/transaction\");\n  };\n\n  return (\n    <>\n      <div className=\"form\">\n        <form onSubmit={handleSubmit(onSubmit)} method=\"POST\">\n          <label className=\"label\">Transaction Date:</label>\n          <div className=\"input\">\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"transactionDate\"\n              {...register(\"transactionDate\")}\n              // value={data.transactionDate.value}\n              // onChange={(e) => {\n              //   DateHandler(e.target.value);\n              // }}\n              onClick={() => {\n                const newdate = new Date();\n                var year = newdate.getFullYear();\n                var month = newdate.getMonth() + 1;\n                var day = newdate.getDate();\n                if (month < 10) {\n                  month = \"0\" + month;\n                }\n                if (day < 10) {\n                  day = \"0\" + day;\n                }\n\n                var limit = `${year}-${month}-${day}`;\n\n                document.getElementById(\"date\").setAttribute(\"max\", limit);\n              }}\n            ></input>\n            <span>{errors.transactionDate?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Month Year:</label>\n\n          <div className=\"input\">\n            <select\n              name=\"monthYear\"\n              {...register(\"monthYear\")}\n              // value={data.monthYear.value}\n              id=\"\"\n              // onChange={(e) => {\n              //   MonthHandler(e.target.value);\n              // }}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n\n              {MonthArr.map((month) => {\n                return (\n                  <option value={`${month} 2023`}>{`${month} 2023`}</option>\n                );\n              })}\n            </select>\n            <span>{errors.monthYear?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Transaction Type:</label>\n          <div className=\"input\">\n            <select\n              name=\"transactionType\"\n              {...register(\"transactionType\")}\n              // value={data.transactionType.value}\n              // onChange={(e) => {\n              //   TypeHandler(e.target.value);\n              // }}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={TransactionTypeArr} />\n            </select>\n            <span>{errors.transactionType?.message}</span>\n          </div>\n          <br></br>\n\n          <label className=\"label\">From Account:</label>\n          <div className=\"input\">\n            <select\n              name=\"fromAccount\"\n              {...register(\"fromAccount\")}\n\n              // value={data.fromAccount.value}\n              // onChange={(e) => {\n              //   FromActHandler(e.target.value);\n              // }}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={AccountArr} />\n            </select>\n            <span>{errors.fromAccount?.message}</span>\n          </div>\n          <br></br>\n\n          <label className=\"label\">To Account: </label>\n          <div className=\"input\">\n            <select\n              name=\"toAccount\"\n              {...register(\"toAccount\")}\n              // value={data.toAccount.value}\n              // onChange={(e) => {\n              //   toActHandler(e.target.value);\n              // }}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={AccountArr} />\n            </select>\n            <span>{errors.toAccount?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Amount:</label>\n          <div className=\"input\">\n            <input\n              type=\"text\"\n              name=\"transactionAmount\"\n              {...register(\"transactionAmount\")}\n              // value={data.transactionAmount.value}\n              // onChange={(e) => {\n              //   AmountHandler(e.target.value);\n              // }}\n            ></input>\n            <span>{errors.transactionAmount?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Receipt:</label>\n          <div className=\"input\">\n            {\n              // data.receipt.value ? (\n              //   <>\n              //     <img src={data.receipt.value} width={50} height={50} alt=\"\" />\n              //     <span onClick={removeImage} className=\"cross\">\n              //       X\n              //     </span>\n              //   </>\n              // ) :\n              <>\n                <input\n                  type=\"file\"\n                  name=\"receipt\"\n                  alt=\"Receipt is not found\"\n                  {...register(\"receipt\")}\n                  // value={data.receipt.value}\n                  // onChange={(e) => {\n                  //   ReceiptHandler(e);\n                  // }}\n                ></input>\n                <span onClick={removeImage} className=\"cross\">\n                  X\n                </span>\n              </>\n            }\n\n            <span>{errors.receipt?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Notes:</label>\n          <div className=\"input\">\n            <textarea\n              cols=\"30\"\n              rows=\"6\"\n              name=\"notes\"\n              {...register(\"notes\")}\n\n              // value={data.notes.value}\n              // onChange={(e) => {\n              //   NotesHandler(e.target.value);\n              // }}\n            ></textarea>\n            <span>{errors.notes?.message}</span>\n          </div>\n\n          <button type=\"submit\" className=\"submitBtn\">\n            Submit\n          </button>\n\n          <Link to={`/transaction`} className=\"showTrn\">\n            Show Transaction\n          </Link>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default TransactionForm;\n"],"mappings":";;AAAA,OAAO,kCAAkC;AACzC,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,QAAQ,EAAEC,kBAAkB,EAAEC,UAAU,QAAQ,mBAAmB;AAC5E,SAASC,QAAQ,QAAQ,YAAY;AAErC,OAAO,KAAKC,GAAG,MAAM,KAAK;AAC1B,SAASC,WAAW,QAAQ,yBAAyB;AACrD,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAE1C,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAAA,IAAAC,qBAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,mBAAA,EAAAC,iBAAA,EAAAC,qBAAA,EAAAC,eAAA,EAAAC,aAAA;EAC5B,MAAM;IAAEC;EAAG,CAAC,GAAGvB,SAAS,EAAE;EAC1B,MAAMwB,KAAK,GAAGD,EAAE,GAAG,CAAC;EACpB,MAAME,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC,CAAC;EACtE;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGlC,QAAQ,CAAC,CAAC,CAAC,CAAC;EACpC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMmC,QAAQ,GAAGjC,WAAW,EAAE;;EAE9B;EACA,MAAMkC,aAAa,GAAG,KAAK,CAAC,CAAC;;EAE7B,MAAMC,mBAAmB,GAAG;IAC1BC,KAAK,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM;EACpD,CAAC;EAED,SAASC,eAAeA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC3C,OACED,QAAQ,IACRH,mBAAmB,CAACI,QAAQ,CAAC,CAACC,OAAO,CAACF,QAAQ,CAACG,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE,CAAC,GAAG,CAAC,CAAC;EAEzE;EACA,MAAMC,UAAU,GAAGpC,GAAG,CAACqC,MAAM,EAAE,CAACC,KAAK,CAAC;IACpCC,eAAe,EAAEvC,GAAG,CAACwC,MAAM,EAAE,CAACC,QAAQ,CAAC,gCAAgC,CAAC;IACxEC,SAAS,EAAE1C,GAAG,CAACwC,MAAM,EAAE,CAACC,QAAQ,CAAC,0BAA0B,CAAC;IAC5DE,eAAe,EAAE3C,GAAG,CAACwC,MAAM,EAAE,CAACC,QAAQ,CAAC,gCAAgC,CAAC;IACxEG,WAAW,EAAE5C,GAAG,CACbwC,MAAM;IACP;IAAA,CACCC,QAAQ,CAAC,uBAAuB,CAAC;IACpCI,SAAS,EAAE7C,GAAG,CACXwC,MAAM,EAAE,CACRM,QAAQ,CAAC,CAAC9C,GAAG,CAAC+C,GAAG,CAAC,aAAa,CAAC,EAAE,IAAI,CAAC,EAAE,4BAA4B,CAAC,CACtEN,QAAQ,CAAC,uBAAuB,CAAC;IACpCO,iBAAiB,EAAEhD,GAAG,CACnBiD,MAAM,EAAE,CACRC,OAAO,EAAE,CACTC,QAAQ,EAAE,CACVC,GAAG,CAAC,CAAC,CAAC,CACNX,QAAQ,EAAE,CACVY,SAAS,CAAC,sBAAsB,CAAC;IACpCC,KAAK,EAAEtD,GAAG,CACPwC,MAAM,EAAE,CACRY,GAAG,CAAC,CAAC,CAAC,CACNG,GAAG,CAAC,GAAG,CAAC,CACRd,QAAQ,EAAE,CACVY,SAAS,CAAC,qBAAqB;IAClC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,CAAC;;EAEF,MAAM;IACJG,QAAQ;IACRC,YAAY;IACZC,QAAQ;IACRC,SAAS,EAAE;MAAEC;IAAO;EACtB,CAAC,GAAG1D,OAAO,CAAC;IACV2D,QAAQ,EAAE5D,WAAW,CAACmC,UAAU;EAClC,CAAC,CAAC;;EAEF;;EAEA5C,SAAS,CAAC,MAAM;IACd,KAAK,MAAMsE,GAAG,IAAI3C,UAAU,EAAE;MAAA,IAAA4C,eAAA;MAC5B,IAAID,GAAG,IAAIE,QAAQ,EAAAD,eAAA,GAAC5C,UAAU,CAAC2C,GAAG,CAAC,cAAAC,eAAA,uBAAfA,eAAA,CAAiB9C,EAAE,CAAC,KAAK+C,QAAQ,CAAC/C,EAAE,CAAC,EAAE;QACzDQ,OAAO,CAACN,UAAU,CAAC2C,GAAG,CAAC,CAAC;QACxB;MACF;IACF;IACA;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxBxC,OAAO,CAAEyC,IAAI,KAAM;MACjB,GAAGA,IAAI;MACPC,OAAO,EAAE;QACP,GAAGD,IAAI,CAACC,OAAO;QACfC,KAAK,EAAE;MACT;IACF,CAAC,CAAC,CAAC;EACL,CAAC;EAED,MAAMC,QAAQ,GAAIC,CAAC,IAAK;IACtB;IACA,IAAI;MACF5B,SAAS;MACTH,eAAe;MACfI,eAAe;MACfC,WAAW;MACXC,SAAS;MACTG,iBAAiB;MACjBmB,OAAO;MACPb;IACF,CAAC,GAAGgB,CAAC;IACLC,OAAO,CAACC,GAAG,CACT9B,SAAS,EACTH,eAAe,EACfI,eAAe,EACfC,WAAW,EACXC,SAAS,EACTG,iBAAiB,EACjBmB,OAAO,EACPb,KAAK,CACN;;IAED;IACA;IACA,IAAImB,UAAU,GAAG;MACf/B,SAAS,EAAE;QACT;QACA0B,KAAK,EAAE1B;MACT,CAAC;MACDH,eAAe,EAAE;QACf;QACA6B,KAAK,EAAE7B;MACT,CAAC;MACDI,eAAe,EAAE;QACf;QACAyB,KAAK,EAAEzB;MACT,CAAC;MACDC,WAAW,EAAE;QACX;QACAwB,KAAK,EAAExB;MACT,CAAC;MACDC,SAAS,EAAE;QACT;QACAuB,KAAK,EAAEvB;MACT,CAAC;MACDG,iBAAiB,EAAE;QACjB;QAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}