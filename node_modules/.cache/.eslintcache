[{"/home/meet-vaghasiya/reactPractice/khatabook/src/index.js":"1","/home/meet-vaghasiya/reactPractice/khatabook/src/App.js":"2","/home/meet-vaghasiya/reactPractice/khatabook/src/components/Form.jsx":"3","/home/meet-vaghasiya/reactPractice/khatabook/src/components/Transaction.jsx":"4","/home/meet-vaghasiya/reactPractice/khatabook/src/components/Pagination.jsx":"5","/home/meet-vaghasiya/reactPractice/khatabook/src/components/View.jsx":"6","/home/meet-vaghasiya/reactPractice/khatabook/src/components/Registration.jsx":"7","/home/meet-vaghasiya/reactPractice/khatabook/src/components/Login.jsx":"8","/home/meet-vaghasiya/reactPractice/khatabook/src/components/Dropdown.jsx":"9","/home/meet-vaghasiya/reactPractice/khatabook/src/utils/constant.js":"10","/home/meet-vaghasiya/reactPractice/khatabook/src/utils/helper.js":"11","/home/meet-vaghasiya/reactPractice/khatabook/src/pages/transaction/compomnents/Table.jsx":"12","/home/meet-vaghasiya/reactPractice/khatabook/src/auth/Unauth.jsx":"13","/home/meet-vaghasiya/reactPractice/khatabook/src/auth/Auth.jsx":"14","/home/meet-vaghasiya/reactPractice/khatabook/src/Validations/UserValidation.js":"15","/home/meet-vaghasiya/reactPractice/khatabook/src/components/YupValidations.jsx":"16","/home/meet-vaghasiya/reactPractice/khatabook/src/context/transactionTable.jsx":"17"},{"size":148,"mtime":1682486666471,"results":"18","hashOfConfig":"19"},{"size":665,"mtime":1683724755406,"results":"20","hashOfConfig":"19"},{"size":11216,"mtime":1683875325720,"results":"21","hashOfConfig":"19"},{"size":2994,"mtime":1683892752735,"results":"22","hashOfConfig":"19"},{"size":1128,"mtime":1683519623453,"results":"23","hashOfConfig":"19"},{"size":2486,"mtime":1683875220971,"results":"24","hashOfConfig":"19"},{"size":3323,"mtime":1683553078206,"results":"25","hashOfConfig":"19"},{"size":2844,"mtime":1683875242067,"results":"26","hashOfConfig":"19"},{"size":216,"mtime":1683519623445,"results":"27","hashOfConfig":"19"},{"size":28520,"mtime":1683955537926,"results":"28","hashOfConfig":"19"},{"size":422,"mtime":1683891707290,"results":"29","hashOfConfig":"19"},{"size":9194,"mtime":1683893489945,"results":"30","hashOfConfig":"19"},{"size":779,"mtime":1683519623445,"results":"31","hashOfConfig":"19"},{"size":1001,"mtime":1683890641622,"results":"32","hashOfConfig":"19"},{"size":195,"mtime":1683544114631,"results":"33","hashOfConfig":"19"},{"size":2324,"mtime":1683550696794,"results":"34","hashOfConfig":"19"},{"size":598,"mtime":1683875338632,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"1u9vbfx",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"39"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"39"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},"/home/meet-vaghasiya/reactPractice/khatabook/src/index.js",[],[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/App.js",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/components/Form.jsx",["91","92","93"],["94","95"],"import \"../assets/styles/transaction.css\";\nimport React, { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { useTransactionData } from \"../context/transactionTable\";\nimport {\n  MonthArr,\n  TransactionTypeArr,\n  AccountArr,\n  MAX_FILE_SIZE,\n  validFileExtensions,\n} from \"../utils/constant\";\nimport { Dropdown } from \"./Dropdown\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { useForm } from \"react-hook-form\";\nlet info = {\n  monthYear: {},\n  transactionDate: {},\n  transactionType: {},\n  fromAccount: {},\n  toAccount: {},\n  transactionAmount: {},\n  receipt: {},\n  notes: {},\n};\n\nconst TransactionForm = () => {\n  const { id } = useParams();\n  const index = id - 1;\n  // const updateData = JSON.parse(localStorage.getItem(\"transactionForm\"));\n\n  // context data\n  const { transactionData, setTransactionData } = useTransactionData([]);\n  const updateData = transactionData;\n  const [submit, setSubmit] = useState(false);\n  const navigate = useNavigate();\n  const [data, setData] = useState(info);\n\n  //\n  // YUP VALIDATIONS...\n\n  const formSchema = yup.object().shape({\n    transactionDate: yup.string().required(\"Transaction Date is required!!\"),\n    monthYear: yup.string().required(\"month year is required!!\"),\n    transactionType: yup.string().required(\"transaction type is required!!\"),\n    fromAccount: yup\n      .string()\n      // .notOneOf([yup.ref(\"toAccount\"), null], \"To Account is  matched!!\")\n      .required(\"account is required!!\"),\n    toAccount: yup\n      .string()\n      .notOneOf([yup.ref(\"fromAccount\"), null], \"From Account is  matched!!\")\n      .required(\"account is required!!\"),\n    transactionAmount: yup\n      .number()\n      .integer()\n      .positive()\n      .min(2, \"minimum amount should be 10\")\n      .required()\n      .typeError(\"amount is required!!\"),\n    notes: yup\n      .string()\n      .min(3)\n      .trim()\n      .max(250)\n      .required()\n      .typeError(\"notes is required!!\"),\n    receipt: yup.mixed().test({\n      name: \"is-sku\",\n      skipAbsent: true,\n      test(value, error) {\n        if (value === undefined || value === null || value.length === 0) {\n          return error.createError({ message: \"image is required!!!\" });\n        } else {\n          if (typeof value === \"string\") {\n            return true;\n          } else {\n            if (!validFileExtensions.includes(value[0].type)) {\n              return error.createError({\n                message: \"image type must be jpeg,png,jpg or svg..\",\n              });\n            }\n          }\n          if (typeof value === \"string\") {\n            return true;\n          } else {\n            if (value[0][\"size\"] > MAX_FILE_SIZE) {\n              return error.createError({\n                message: \"image must less than 10kb\",\n              });\n            }\n          }\n        }\n        return true;\n      },\n    }),\n  });\n  let dummy = updateData.filter((value) => {\n    if (parseInt(value[\"id\"])) {\n      return parseInt(value[\"id\"]) === parseInt(id);\n    }\n  });\n\n  let udata = {};\n\n  for (let a in dummy[0]) {\n    if (dummy[0][a].value !== undefined) {\n      udata[a] = dummy[0][a].value;\n    }\n  }\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n  } = useForm({\n    resolver: yupResolver(formSchema),\n    defaultValues: udata,\n  });\n  // ......\n\n  for (let a in dummy[0]) {\n    if (dummy[0][a].value !== undefined) {\n      udata[a] = dummy[0][a].value;\n    }\n  }\n\n  useEffect(() => {\n    for (const key in updateData) {\n      if (key && parseInt(updateData[key]?.id) === parseInt(id)) {\n        setData(updateData[key]);\n        break;\n      }\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [id]);\n\n  const removeImage = () => {\n    setData((prev) => ({\n      ...prev,\n      receipt: \"\",\n    }));\n  };\n  const onSubmit = (e) => {\n    let {\n      monthYear,\n      transactionDate,\n      transactionType,\n      fromAccount,\n      toAccount,\n      transactionAmount,\n      receipt,\n      notes,\n    } = e;\n\n    setData((prev) => ({\n      ...prev,\n      monthYear: {\n        value: monthYear,\n      },\n      transactionDate: {\n        value: transactionDate,\n      },\n      transactionType: {\n        value: transactionType,\n      },\n      fromAccount: {\n        value: fromAccount,\n      },\n      toAccount: {\n        value: toAccount,\n      },\n      transactionAmount: {\n        value: transactionAmount,\n      },\n      receipt: {\n        value: data.receipt.value,\n      },\n      notes: {\n        value: notes,\n      },\n    }));\n\n    // setData(data);\n    setData(data); // context data\n    setSubmit(true);\n  };\n  const handleChange = (e) => {\n    let receiptPhoto;\n    let file = e.target.files[0];\n    let freader = new FileReader();\n    freader.readAsDataURL(file);\n    freader.addEventListener(\"load\", () => {\n      receiptPhoto = freader.result;\n\n      setData((prev) => ({\n        ...prev,\n        receipt: {\n          ...prev.receipt,\n          value: receiptPhoto,\n        },\n      }));\n    });\n  };\n\n  useEffect(() => {\n    if (submit) {\n      if (transactionData.length !== 0) {\n        const retrivedata = transactionData;\n\n        if (id) {\n          for (const e in retrivedata) {\n            if (parseInt(retrivedata[e].id) === parseInt(id)) {\n              data[\"id\"] = id;\n              retrivedata[e] = data;\n            }\n          }\n        } else {\n          const prevDataIndex = Object.keys(retrivedata).length - 1;\n          const prevId = retrivedata[prevDataIndex][\"id\"];\n          data[\"id\"] = parseInt(parseInt(prevId) + 1);\n\n          retrivedata.push(data);\n        }\n        setTransactionData(retrivedata);\n        // localStorage.setItem(\"transactionForm\", JSON.stringify(retrivedata));\n      } else {\n        data[\"id\"] = parseInt(1);\n        // transactionData.push(data);   //secong approach\n        setTransactionData((prev) => [...prev, data]);\n\n        // localStorage.setItem(\"transactionForm\", JSON.stringify([data]));\n      }\n\n      navigate(\"/transaction\");\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <>\n      <div className=\"form\">\n        <form onSubmit={handleSubmit(onSubmit)} method=\"POST\">\n          <label className=\"label\">Transaction Date:</label>\n          <div className=\"input\">\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"transactionDate\"\n              {...register(\"transactionDate\")}\n              // value={data?.transactionDate?.value}\n\n              onClick={() => {\n                const newdate = new Date();\n                var year = newdate.getFullYear();\n                var month = newdate.getMonth() + 1;\n                var day = newdate.getDate();\n                if (month < 10) {\n                  month = \"0\" + month;\n                }\n                if (day < 10) {\n                  day = \"0\" + day;\n                }\n\n                var limit = `${year}-${month}-${day}`;\n\n                document.getElementById(\"date\").setAttribute(\"max\", limit);\n              }}\n            ></input>\n            <span>{errors.transactionDate?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Month Year:</label>\n\n          <div className=\"input\">\n            <select\n              name=\"monthYear\"\n              {...register(\"monthYear\")}\n              // value={data?.monthYear?.value}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n\n              {MonthArr.map((month) => {\n                return (\n                  <option value={`${month} 2023`}>{`${month} 2023`}</option>\n                );\n              })}\n            </select>\n            <span>{errors.monthYear?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Transaction Type:</label>\n          <div className=\"input\">\n            <select\n              name=\"transactionType\"\n              {...register(\"transactionType\")}\n              // value={data?.transactionType?.value}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={TransactionTypeArr} />\n            </select>\n            <span>{errors.transactionType?.message}</span>\n          </div>\n          <br></br>\n\n          <label className=\"label\">From Account:</label>\n          <div className=\"input\">\n            <select\n              name=\"fromAccount\"\n              {...register(\"fromAccount\")}\n              // value={data?.fromAccount?.value}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={AccountArr} />\n            </select>\n            <span>{errors.fromAccount?.message}</span>\n          </div>\n          <br></br>\n\n          <label className=\"label\">To Account: </label>\n          <div className=\"input\">\n            <select\n              name=\"toAccount\"\n              {...register(\"toAccount\")}\n              // value={data?.toAccount?.value}\n            >\n              <option value=\"\" selected>\n                Select\n              </option>\n              <Dropdown for={AccountArr} />\n            </select>\n            <span>{errors.toAccount?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Amount:</label>\n          <div className=\"input\">\n            <input\n              type=\"text\"\n              name=\"transactionAmount\"\n              {...register(\"transactionAmount\")}\n              // value={data?.transactionAmount?.value}\n            ></input>\n            <span>{errors.transactionAmount?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Receipt:</label>\n          <div className=\"input\">\n            {data.receipt.value ? (\n              <>\n                <img src={data.receipt.value} width={50} height={50} alt=\"\" />\n                <span onClick={removeImage} className=\"cross\">\n                  X\n                </span>\n              </>\n            ) : (\n              <>\n                <input\n                  type=\"file\"\n                  name=\"receipt\"\n                  alt=\"Receipt is not found\"\n                  {...register(\"receipt\", { onChange: handleChange })}\n                  // value={data?.receipt?.value}\n                ></input>\n              </>\n            )}\n\n            <span>{errors.receipt?.message}</span>\n          </div>\n          <br></br>\n          <label className=\"label\">Notes:</label>\n          <div className=\"input\">\n            <textarea\n              cols=\"30\"\n              rows=\"6\"\n              name=\"notes\"\n              {...register(\"notes\")}\n              // value={data?.notes?.value}\n            ></textarea>\n            <span>{errors.notes?.message}</span>\n          </div>\n\n          <button type=\"submit\" className=\"submitBtn\">\n            Submit\n          </button>\n\n          <Link to={`/transaction`} className=\"showTrn\">\n            Show Transaction\n          </Link>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default TransactionForm;\n","/home/meet-vaghasiya/reactPractice/khatabook/src/components/Transaction.jsx",["96","97","98"],[],"import { Link, useNavigate } from \"react-router-dom\";\nimport { useState } from \"react\";\nimport Table from \"../pages/transaction/compomnents/Table\";\nimport { Dropdown } from \"../components/Dropdown\";\nimport { groupArr } from \"../utils/constant\";\nimport { useTransactionData } from \"../context/transactionTable\";\nimport { useEffect } from \"react\";\n\nconst Transaction = () => {\n  const navigate = useNavigate();\n  const { transactionData, setTransactionData } = useTransactionData();\n\n  const [transactionDatas,setTransactionDatas]=useState(transactionData);\n  // const retrivedata = [...transactionDatas;\n  const [groupby, setGroupby] = useState({});\n\n  useEffect(() => {\n    console.log(\"transa>>>>>>\");\n    console.log(transactionData);\n    setTransactionDatas(transactionData);\n  }, [transactionData]);\n\n  const [groupVal, setGroupVal] = useState(\"\");\n\n  useEffect(() => {\n    console.log(\"render effect\");\n    groupBy(groupVal);\n  }, [transactionDatas]);\n\n  const groupBy = (e) => {\n    const gData = [...transactionDatas];\n\n    let groupData = {};\n    if (e.target) {\n      if (transactionDatas) {\n        let field = e.target.value;\n        setGroupVal(field);\n        console.log(field, \"field\");\n\n        if (field === \"none\") {\n          setGroupby(groupData);\n        } else {\n          gData.forEach((items) => {\n            const item = items[field]?.value;\n            groupData[item] = groupData[item] ?? [];\n            groupData[item].push(items);\n          });\n          setGroupby(groupData);\n          // setTransactionData(groupData)\n        }\n      }\n    } else {\n      if (e) {\n        console.log(e, \"GEROERT>>>>>>>>>>>>>>\");\n        gData.forEach((items) => {\n          const item = items[e]?.value;\n          groupData[item] = groupData[item] ?? [];\n          groupData[item].push(items);\n        });\n        setGroupby(groupData);\n      }\n    }\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"logindata\");\n    navigate(\"/public/login\");\n  };\n\n  return (\n    <>\n      <div className=\"details\">\n        <>\n          <label>Group By:</label>\n          <select\n            className=\"groupby\"\n            onChange={(e) => {\n              groupBy(e);\n            }}\n          >\n            <Dropdown for={groupArr} />\n          </select>\n        </>\n\n        <div>{transactionDatas && <Table records={transactionDatas} />}</div>\n\n        <button className=\"createBtn\">\n          <Link to={\"/create\"}>Create Transaction</Link>\n        </button>\n\n        <button className=\"logoutBtn\" onClick={logout}>\n          Logout\n        </button>\n        <div className=\"groupDetails\">\n          {Object.keys(groupby).map((d, index) => {\n            if (d !== undefined) {\n              return (\n                <>\n                  <h2>{d}</h2>\n                  <Table records={groupby[d]} />\n                </>\n              );\n            } else {\n              <></>;\n            }\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\nexport default Transaction;\n","/home/meet-vaghasiya/reactPractice/khatabook/src/components/Pagination.jsx",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/components/View.jsx",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/components/Registration.jsx",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/components/Login.jsx",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/components/Dropdown.jsx",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/utils/constant.js",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/utils/helper.js",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/pages/transaction/compomnents/Table.jsx",[],["99"],"/home/meet-vaghasiya/reactPractice/khatabook/src/auth/Unauth.jsx",[],["100"],"/home/meet-vaghasiya/reactPractice/khatabook/src/auth/Auth.jsx",[],["101"],"/home/meet-vaghasiya/reactPractice/khatabook/src/Validations/UserValidation.js",[],[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/components/YupValidations.jsx",[],[],"/home/meet-vaghasiya/reactPractice/khatabook/src/context/transactionTable.jsx",[],[],{"ruleId":"102","severity":1,"message":"103","line":31,"column":9,"nodeType":"104","messageId":"105","endLine":31,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":100,"column":41,"nodeType":"108","messageId":"109","endLine":100,"endColumn":43},{"ruleId":"102","severity":1,"message":"110","line":154,"column":7,"nodeType":"104","messageId":"105","endLine":154,"endColumn":14},{"ruleId":"111","severity":1,"message":"112","line":138,"column":6,"nodeType":"113","endLine":138,"endColumn":10,"suggestions":"114","suppressions":"115"},{"ruleId":"111","severity":1,"message":"116","line":240,"column":6,"nodeType":"113","endLine":240,"endColumn":12,"suggestions":"117","suppressions":"118"},{"ruleId":"102","severity":1,"message":"119","line":11,"column":28,"nodeType":"104","messageId":"105","endLine":11,"endColumn":46},{"ruleId":"111","severity":1,"message":"120","line":28,"column":6,"nodeType":"113","endLine":28,"endColumn":24,"suggestions":"121"},{"ruleId":"106","severity":1,"message":"122","line":95,"column":48,"nodeType":"108","messageId":"109","endLine":95,"endColumn":50},{"ruleId":"111","severity":1,"message":"123","line":117,"column":6,"nodeType":"113","endLine":117,"endColumn":19,"suggestions":"124","suppressions":"125"},{"ruleId":"111","severity":1,"message":"126","line":14,"column":5,"nodeType":"113","endLine":14,"endColumn":7,"suggestions":"127","suppressions":"128"},{"ruleId":"111","severity":1,"message":"126","line":16,"column":6,"nodeType":"113","endLine":16,"endColumn":8,"suggestions":"129","suppressions":"130"},"no-unused-vars","'index' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'receipt' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateData'. Either include it or remove the dependency array.","ArrayExpression",["131"],["132"],"React Hook useEffect has missing dependencies: 'id', 'navigate', 'setTransactionData', 'submit', and 'transactionData'. Either include them or remove the dependency array.",["133"],["134"],"'setTransactionData' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'groupBy' and 'groupVal'. Either include them or remove the dependency array.",["135"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","React Hook useEffect has missing dependencies: 'props.records' and 'sortedData'. Either include them or remove the dependency array. If 'setSortedData' needs the current value of 'props.records', you can also switch to useReducer instead of useState and read 'props.records' in the reducer.",["136"],["137"],"React Hook useEffect has missing dependencies: 'navigate' and 'token'. Either include them or remove the dependency array.",["138"],["139"],["140"],["141"],{"desc":"142","fix":"143"},{"kind":"144","justification":"145"},{"desc":"146","fix":"147"},{"kind":"144","justification":"145"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"kind":"144","justification":"145"},{"desc":"152","fix":"153"},{"kind":"144","justification":"145"},{"desc":"152","fix":"154"},{"kind":"144","justification":"145"},"Update the dependencies array to be: [id, updateData]",{"range":"155","text":"156"},"directive","","Update the dependencies array to be: [data, id, navigate, setTransactionData, submit, transactionData]",{"range":"157","text":"158"},"Update the dependencies array to be: [groupBy, groupVal, transactionDatas]",{"range":"159","text":"160"},"Update the dependencies array to be: [props.records, sortedData, sortedField]",{"range":"161","text":"162"},"Update the dependencies array to be: [navigate, token]",{"range":"163","text":"164"},{"range":"165","text":"164"},[3809,3813],"[id, updateData]",[6188,6194],"[data, id, navigate, setTransactionData, submit, transactionData]",[936,954],"[groupBy, groupVal, transactionDatas]",[3917,3930],"[props.records, sortedData, sortedField]",[458,460],"[navigate, token]",[537,539]]